from qgis.utils import ifacefrom qgis.core import *from PyQt4.QtCore import * #QVariantfrom PyQt4.QtGui import QColorfrom PyQt4.QtGui import *import syssys.path.append('/Users/Alec_/pythonMods') #note:this will change on PCdef exportMap(fileName,path,POINTLAYER,POLYLAYER,dateRange,resolution=300):    #note, QgsRectangle=malnutrition_prevLayer.extent()    """mainLayer=[]    for layer in iface.mapCanvas().layers():        if layer.name()==POLYLAYER:            mainLayer=layer    rect=mainLayer.extent() #so composer grabs extent from poly layer                 #keep for later    """    xmin=-8276492    ymin=2036988    xmax=-8181087    ymax=2084520    rect=QgsRectangle(xmin,ymin,xmax,ymax)    #assume picture is ready to be exported    mapRenderer = iface.mapCanvas().mapRenderer()    mapRenderer.setExtent(rect)     c = QgsComposition(mapRenderer)    c.setPlotStyle(QgsComposition.Print)    #stretch map over whole composer paper    x, y = 0, 0    w, h = c.paperWidth(), c.paperHeight()    composerMap = QgsComposerMap(c, x,y,w,h)    c.addItem(composerMap)    titleString='Malnutrition Prevalence from '+dateRange[0].strftime('%B %d, %Y')+' to '+dateRange[1].strftime('%B %d, %Y')    #add labels    composerLabel = QgsComposerLabel(c)    composerLabel.setText(titleString)    composerLabel.adjustSizeToText()    c.addItem(composerLabel)    #set legend    legend = QgsComposerLegend(c)    index=0    layerindex=[]    #grab the polygon layer from layerset, only it goes in legend    #note: below is sloppy    for layer in mapRenderer.layerSet():        if POLYLAYER.lower().split(' ')[0] in layer.lower():            layerindex=index        index+=1        legend.model().setLayerSet([mapRenderer.layerSet()[layerindex]])                                                  c.addItem(legend)     # set both label's position and size (width 10cm, height 3cm)    composerLabel.setItemPosition(100,10)    #composerLabel.setFrameEnabled(False)    #c.setPaperSize(width, height) in milimeteres    c.setPrintResolution(resolution)    #output to pdf    printer = QPrinter()    printer.setOutputFormat(QPrinter.PdfFormat)    printer.setOutputFileName(path+fileName)    printer.setPaperSize(QSizeF(c.paperWidth(), c.paperHeight()), QPrinter.Millimeter)    printer.setFullPage(True)    printer.setColorMode(QPrinter.Color)    printer.setResolution(c.printResolution())    pdfPainter = QPainter(printer)    paperRectMM = printer.pageRect(QPrinter.Millimeter)    paperRectPixel = printer.pageRect(QPrinter.DevicePixel)    c.render(pdfPainter, paperRectPixel, paperRectMM)    pdfPainter.end()    print 'rendered a map'